// Code generated by go-bindata.
// sources:
// data/view.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xcd\x8e\xda\x30\x10\xbe\xe7\x29\xa6\x3e\x17\x2c\x6e\x55\xeb\x58\x5a\xc1\xae\x8a\x84\x28\xa2\xa4\x6a\x4f\xc8\x49\x06\x62\x29\xb6\xa9\x3d\x59\x1a\x21\xde\xbd\x32\x06\x75\xb7\x5b\xe8\x81\x5c\xa2\xf9\xf2\xfd\x64\x46\x63\x8b\x77\x93\x2f\xe3\xd5\x8f\xc5\x23\x34\x64\x5a\x99\x89\xcb\x0b\x55\x2d\x85\x41\x52\xd0\x10\xed\x06\xf8\xb3\xd3\xcf\x39\x1b\x3b\x4b\x68\x69\xb0\xea\x77\xc8\xa0\x4a\x55\xce\x08\x7f\x11\x8f\xca\x4f\x50\x35\xca\x07\xa4\xbc\x58\x3d\x0d\x3e\x30\x99\x01\x00\xbc\xf5\xf9\x3e\x28\x1e\x06\x63\x67\x76\x8a\x74\xd9\xbe\xb4\x9a\x3e\xe6\x58\x6f\xf1\x7d\xd5\x78\x67\x30\x1f\x5d\x2c\x48\x53\x8b\xf2\x33\x86\xb2\xf3\xdb\x06\x66\xba\xf4\xca\x6b\x0c\xb0\x40\x6f\x94\x45\x4b\x50\x2c\x67\xf0\xb5\x0f\x84\x46\xf0\x44\xcf\x04\x3f\x35\x92\x65\xa2\x74\x75\x0f\xad\xb2\xdb\x9c\xa1\x65\x32\x4b\xae\xcd\x48\x7e\xd3\xb8\x87\x45\xb1\x9c\x09\xde\x8c\x2e\x38\xa9\x32\xca\xe1\xfc\x08\x8a\xf2\x3f\x75\xc2\xfc\x6b\x20\x81\xb5\x9c\x4e\x04\xa7\xfa\xdf\xdf\x0e\x87\xe1\xb4\x3e\x1e\xdf\x12\x04\xff\xdb\xee\xaa\xff\xdc\x11\xde\x4e\xb0\x1b\xe7\x8d\x22\xed\xec\x9d\x51\x4f\xba\x45\x98\x2b\x73\x3b\x2f\xb2\xd6\x56\x19\xbc\x33\x6d\xa6\x02\xc1\x43\x55\x61\x08\x58\xdf\x4c\x8c\xcc\xb5\x3a\x33\xef\x4c\x5d\xe2\xce\x05\x4d\xce\xf7\x70\x5a\x82\x6b\xb1\x42\x41\xe3\x71\x93\xb3\xc3\x61\x18\x35\xeb\xce\xb7\xc7\x23\x93\xaf\x4a\x10\x5c\xc9\xbb\x7e\x27\xf5\x0f\x63\xd7\x59\xba\x39\x83\x44\x5c\x57\x91\xf8\xff\x11\x08\xfe\x62\x85\x05\x3f\xef\x77\xaa\x14\x9c\x4e\x4b\xce\x0a\xab\x9f\xd1\x07\x4d\x3d\xb8\x0d\xcc\x1d\x79\x84\x89\x32\xc8\xce\x9d\xc7\x13\xfc\x91\xf3\xfd\x7e\x3f\xb4\xf5\x10\xeb\x8e\x33\x79\x4d\x13\x07\x91\x09\x7e\x0a\x15\x3c\xdd\x2a\xbf\x03\x00\x00\xff\xff\x75\x69\x0c\xbe\x6d\x04\x00\x00")

func dataViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataViewHtml,
		"data/view.html",
	)
}

func dataViewHtml() (*asset, error) {
	bytes, err := dataViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/view.html", size: 1133, mode: os.FileMode(420), modTime: time.Unix(1488382839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/view.html": dataViewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"view.html": &bintree{dataViewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
